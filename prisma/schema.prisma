datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL") //todo replace in prod mode
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categorie {
  id         Int  @unique @default(autoincrement())
  name_fr    String   
  name_en    String 
  posts      Post[] 
}

model Tag {
  id         Int  @unique @default(autoincrement())
  name_fr    String   
  name_en    String   
  posts       TagsOnPosts[]
}

model Post {
  id              Int   @unique @default(autoincrement())
  name            String  
  draft           Boolean @default(true)
  tags            TagsOnPosts[]
  categorie       Categorie @relation(fields: [categorieId], references: [id])
  categorieId     Int
  title_fr        String
  title_en        String
  description_fr  String
  description_en  String
  h1_fr           String
  h1_en           String
  content_fr      String //html
  content_en      String //html
  thumbImageUrl   String
  mainImageUrl    String
}

model TagsOnPosts {
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int // relation scalar field (used in the `@relation` attribute above)
  tag         Tag @relation(fields: [tagId], references: [id])
  tagId       Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([postId, tagId])
}
