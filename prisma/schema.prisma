datasource db {
  provider          = "postgresql"
  url               = env("LOCAL_DATABASE_URL") //todo replace in prod mode
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categorie {
  id      Int    @unique @default(autoincrement())
  name_fr String
  name_en String
  slug    String @unique @default("to be replaced")
  posts   Post[]
  portfolios   Portfolio[]
}

model Tag {
  id      Int           @unique @default(autoincrement())
  name_fr String
  name_en String
  posts   TagsOnPosts[]
}

model DbImage {
  id            Int            @id @unique @default(autoincrement())
  name_fr       String
  name_en       String
  alt_fr        String
  alt_en        String
  url           String      
  ut_key        String  
  thumbImage    Post[] @relation("thumbImage")
  portfolioThumbImage Portfolio[] @relation("thumbImage")
  MainImage     Post[] @relation("MainImage")
  portfolioMainImage Portfolio[] @relation("MainImage")
  stacks        Stack[] @relation("stacks")
  

  @@unique([id, url])
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  @@id([postId, tagId])
}

model Post {
  id                 Int             @id @unique @default(autoincrement())
  name_fr            String
  name_en            String
  draft              Boolean         @default(true)
  tags               TagsOnPosts[]
  categorie          Categorie       @relation(fields: [categorieId], references: [id])
  categorieId        Int
  title_fr           String
  title_en           String
  slug               String          @unique
  metaDescription_fr String
  description_fr     String
  metaDescription_en String
  description_en     String
  h1_fr              String
  h1_en              String
  content_fr         String //html
  content_en         String //html
  thumbImage         DbImage           @relation("thumbImage" , fields: [thumbImageId, thumbImageUrl], references: [id, url])
  thumbImageId       Int
  thumbImageUrl      String
  mainImage          DbImage           @relation("MainImage", fields: [mainImageId, mainImageUrl], references: [id, url])
  mainImageId        Int
  mainImageUrl       String
}
model Portfolio {
  id                  Int             @id @unique @default(autoincrement())
  name_fr             String
  name_en             String
  draft               Boolean         @default(true)
  categorie           Categorie       @relation(fields: [categorieId], references: [id])
  categorieId         Int
  title_fr            String
  title_en            String
  slug                String          @unique
  metaDescription_fr  String
  description_fr      String
  metaDescription_en  String
  description_en      String
  h1_fr               String
  h1_en               String
  content_fr          String //html
  content_en          String //html
  portfolioThumbImage DbImage           @relation("thumbImage" , fields: [thumbImageId], references: [id])
  thumbImageId        Int
  mainImage           DbImage           @relation("MainImage", fields: [mainImageId], references: [id])
  mainImageId         Int
  stacks              Stack[]
  demoUrl             String
  codeUrl             String
}

model Stack {
  id                  Int @id @unique @default(autoincrement())
  name                String
  stackImage          DbImage @relation("stacks", fields: [imageId], references: [id])
  imageId             Int
  portfolios          Portfolio[]
}

